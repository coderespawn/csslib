// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library files;

import 'file_system/path.dart';
import 'options.dart';
import 'package:csslib/parser.dart';
import 'utils.dart';

/** An input file to process by the CSS compiler. */
class SourceFile {
  final Path path;

  /** Stylesheet to be processed. */
  String text;

  final List<int> lineStarts = [0];

  /** AST of the compiled source (text). */
  Stylesheet tree;

  SourceFile(this.path, {String source}) : text = source;

  int compareTo(SourceFile other) {
    return path.toString() == other.path.toString() ? 1 : 0;
  }

  /** Returns 0 based line number. */
  int getLine(int start) {
    int line = 0;
    for (var offset in lineStarts) {
      if (start > offset) break;
      line++;
    }
    return line;
  }

  int getColumn(int line, int start) => lineStarts[line] - start;

  String errorLine(int lineNum, int start, int end, {bool useColors: false}) {
    int startLineOffset = lineStarts[lineNum];
    int endLineOffset = lineStarts.length >= lineNum ?
        text.length : lineStarts[lineNum + 1];
    int column = start - startLineOffset;
    int errWidth = end - start;

    String result;
    if (startLineOffset != -1) {
      result = (endLineOffset != -1) ?
          text.substring(startLineOffset, endLineOffset) :
          text.substring(startLineOffset);
    } else {
      result = text;
    }

    // Find EOL.
    var idx = text.indexOf('\n');
    if (idx != -1) {
      result = result.substring(0, idx);
    }

    var buff = new StringBuffer(result);
    buff.add('\n');

    if (useColors) buff.add(RED_COLOR);

    for (var i = 0; i < column; i++) buff.add(' ');
    for (var i = 0; i < errWidth; i++) buff.add('^');

    if (useColors) buff.add(NO_COLOR);

    return buff.toString();
  }

  /**
   * Create a pretty string representation from a character position
   * in the file.
   */
  String getLocationMessage(String filename, String message, int start,
      int end, {bool useColors: false}) {

    var lineNumber = getLine(start);

    var buf = new StringBuffer(
        '$filename @ line ${lineNumber + 1} (column $start:$end)\n');
    buf.add(errorLine(lineNumber, start, end, useColors: useColors));
    buf.add(' $message\n');

    return buf.toString();
  }

  String toString() => "<#SourceFile $path>";
}

/** An output file to generated by the CSS pre-processor. */
class OutputFile {
  final Path path;
  final String contents;

  OutputFile(this.path, this.contents);
}
